if(!require(MASS)) install.packages("MASS",repos = "http://cran.us.r-project.org")
if(!require(kableExtra)) install.packages("kableExtra",repos = "http://cran.us.r-project.org")
if(!require(xtable)) install.packages("xtable",repos = "http://cran.us.r-project.org")
if(!require(purrr)) install.packages("purrr",repos = "http://cran.us.r-project.org")
if(!require(gridExtra)) install.packages("gridExtra",repos = "http://cran.us.r-project.org")
if(!require(knitr)) install.packages("knitr",repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
if(!require(corrplot)) install.packages("corrplot",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(car)) install.packages("car",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(MASS)) install.packages("MASS",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(kableExtra)) install.packages("kableExtra",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(xtable)) install.packages("xtable",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(purrr)) install.packages("purrr",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(gridExtra)) install.packages("gridExtra",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(knitr)) install.packages("knitr",repos = "http://cran.us.r-project.org", dependencies = T)
theme_set(theme_bw())
summary(mod_10)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
if(!require(corrplot)) install.packages("corrplot",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(car)) install.packages("car",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(MASS)) install.packages("MASS",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(kableExtra)) install.packages("kableExtra",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(xtable)) install.packages("xtable",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(purrr)) install.packages("purrr",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(gridExtra)) install.packages("gridExtra",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(knitr)) install.packages("knitr",repos = "http://cran.us.r-project.org", dependencies = T)
theme_set(theme_bw())
summary(Boston)
boston_standart <- as.data.frame(sapply(Boston, scale))
boston_standart$chas <- as.factor(Boston$chas)
boston_standart$rad <- as.factor(Boston$rad)
mat <- cor(boston_standart[ , purrr::map_lgl(boston_standart, is.numeric)])
corrplot(mat)
full_model <- lm(medv ~ ., boston_standart)
summary(full_model)
mod_diag <- fortify(full_model)
gg_resid <- ggplot(data = mod_diag, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
metric <- 4/nrow(boston_standart)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag), y = .cooksd)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = metric, color = "red")
durbinWatsonTest(full_model)
qqPlot(mod_diag$.fitted)
test_data_fm <- data.frame(
lstat = seq(min(Boston$lstat), max(Boston$lstat), length.out = 506),
crim = mean(Boston$crim),
zn = mean(Boston$zn),
indus = mean(Boston$indus),
chas = as.factor(Boston$chas),
nox = mean(Boston$nox),
rm = mean(Boston$rm),
age = mean(Boston$age),
dis = mean(Boston$dis),
rad = as.factor(Boston$rad),
tax = mean(Boston$tax),
ptratio = mean(Boston$ptratio),
black = mean(Boston$black)
)
predictions <- predict(full_model, newdata = test_data_fm,  interval = 'confidence')
test_data_fm <- cbind(test_data_fm, predictions)
ggplot(test_data_fm, aes(x = lstat, y = fit)) +
geom_ribbon(alpha = 0.2, aes(ymin = lwr, ymax = upr)) +
geom_line()
summary(full_model)
mod_1 <- update(full_model, .~. - chas)
summary(mod_1)
mod_2 <- update(mod_1, .~. - indus)
summary(mod_2)
mod_3 <- update(mod_2, .~. - age)
summary(mod_3)
vif(mod_3)
mod_4 <- update(mod_3, .~. - rad)
vif(mod_4)
mod_5 <- update(mod_4, .~. - nox)
vif(mod_5)
mod_6 <- update(mod_5, .~. - dis)
vif(mod_6)
mod_7 <- update(mod_6, .~. - lstat)
vif(mod_7)
mod_diag_adj <- data.frame(fortify(mod_7), boston_standart$lstat, boston_standart$dis,
boston_standart$nox, boston_standart$age,
boston_standart$indus)
gg_resid <- ggplot(data = mod_diag_adj, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = 'lm') +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
res_1 <- gg_resid + aes(x = boston_standart.indus)
res_2 <- gg_resid + aes(x = boston_standart.age)
res_3 <- gg_resid + aes(x = boston_standart.nox)
res_4 <- gg_resid + aes(x = boston_standart.dis)
res_5 <- gg_resid + aes(x = boston_standart.lstat)
grid.arrange(res_1, res_2, res_3, res_4, res_5, nrow = 2)
mod_8 <- update(mod_7, .~. + lstat + dis)
summary(mod_8)
mod_9 <- update(mod_8, .~. - age)
summary(mod_9)
mod_10 <- update(mod_9, .~. + age)
summary(mod_10)
mod_diag_adj <- data.frame(fortify(mod_10), boston_standart$dis,
boston_standart$nox, boston_standart$age,
boston_standart$indus)
gg_resid <- ggplot(data = mod_diag_adj, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
metric <- 4/nrow(boston_standart)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag_adj), y = .cooksd)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = metric, color = "red")
durbinWatsonTest(mod_10)
qqPlot(mod_diag_adj$.fitted)
summary(mod_10)
test_data_10 <- data.frame(
lstat = seq(min(Boston$lstat), max(Boston$lstat), length.out = 506),
crim = mean(Boston$crim),
zn = mean(Boston$zn),
rm = mean(Boston$rm),
tax = mean(Boston$tax),
ptratio = mean(Boston$ptratio),
black = mean(Boston$black),
age = mean(Boston$age),
dis = mean(Boston$dis)
)
predictions <- predict(mod_10, newdata = test_data_10,  interval = 'confidence')
test_data_10 <- cbind(test_data_10, predictions)
ggplot(test_data_10, aes(x = lstat, y = fit)) +
geom_ribbon(alpha = 0.2, aes(ymin = lwr, ymax = upr)) +
geom_line()
summary(mod_10)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
if(!require(corrplot)) install.packages("corrplot",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(car)) install.packages("car",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(MASS)) install.packages("MASS",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(kableExtra)) install.packages("kableExtra",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(xtable)) install.packages("xtable",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(purrr)) install.packages("purrr",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(gridExtra)) install.packages("gridExtra",repos = "http://cran.us.r-project.org", dependencies = T)
if(!require(knitr)) install.packages("knitr",repos = "http://cran.us.r-project.org", dependencies = T)
theme_set(theme_bw())
summary(Boston)
boston_standart <- as.data.frame(sapply(Boston, scale))
boston_standart$chas <- as.factor(Boston$chas)
boston_standart$rad <- as.factor(Boston$rad)
mat <- cor(boston_standart[ , purrr::map_lgl(boston_standart, is.numeric)])
corrplot(mat)
full_model <- lm(medv ~ ., boston_standart)
summary(full_model)
mod_diag <- fortify(full_model)
gg_resid <- ggplot(data = mod_diag, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
metric <- 4/nrow(boston_standart)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag), y = .cooksd)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = metric, color = "red")
durbinWatsonTest(full_model)
qqPlot(mod_diag$.fitted)
test_data_fm <- data.frame(
lstat = seq(min(Boston$lstat), max(Boston$lstat), length.out = 506),
crim = mean(Boston$crim),
zn = mean(Boston$zn),
indus = mean(Boston$indus),
chas = as.factor(Boston$chas),
nox = mean(Boston$nox),
rm = mean(Boston$rm),
age = mean(Boston$age),
dis = mean(Boston$dis),
rad = as.factor(Boston$rad),
tax = mean(Boston$tax),
ptratio = mean(Boston$ptratio),
black = mean(Boston$black)
)
predictions <- predict(full_model, newdata = test_data_fm,  interval = 'confidence')
test_data_fm <- cbind(test_data_fm, predictions)
ggplot(test_data_fm, aes(x = lstat, y = fit)) +
geom_ribbon(alpha = 0.2, aes(ymin = lwr, ymax = upr)) +
geom_line()
summary(full_model)
mod_1 <- update(full_model, .~. - chas)
summary(mod_1)
mod_2 <- update(mod_1, .~. - indus)
summary(mod_2)
mod_3 <- update(mod_2, .~. - age)
summary(mod_3)
vif(mod_3)
mod_4 <- update(mod_3, .~. - rad)
vif(mod_4)
mod_5 <- update(mod_4, .~. - nox)
vif(mod_5)
mod_6 <- update(mod_5, .~. - dis)
vif(mod_6)
mod_7 <- update(mod_6, .~. - lstat)
vif(mod_7)
mod_diag_adj <- data.frame(fortify(mod_7), boston_standart$lstat, boston_standart$dis,
boston_standart$nox, boston_standart$age,
boston_standart$indus)
gg_resid <- ggplot(data = mod_diag_adj, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = 'lm') +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
res_1 <- gg_resid + aes(x = boston_standart.indus)
res_2 <- gg_resid + aes(x = boston_standart.age)
res_3 <- gg_resid + aes(x = boston_standart.nox)
res_4 <- gg_resid + aes(x = boston_standart.dis)
res_5 <- gg_resid + aes(x = boston_standart.lstat)
grid.arrange(res_1, res_2, res_3, res_4, res_5, nrow = 2)
mod_8 <- update(mod_7, .~. + lstat + dis)
summary(mod_8)
mod_9 <- update(mod_8, .~. - age)
summary(mod_9)
mod_10 <- update(mod_9, .~. + age)
summary(mod_10)
mod_diag_adj <- data.frame(fortify(mod_10), boston_standart$dis,
boston_standart$nox, boston_standart$age,
boston_standart$indus)
gg_resid <- ggplot(data = mod_diag_adj, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
metric <- 4/nrow(boston_standart)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag_adj), y = .cooksd)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = metric, color = "red")
durbinWatsonTest(mod_10)
qqPlot(mod_diag_adj$.fitted)
summary(mod_10)
test_data_10 <- data.frame(
lstat = seq(min(Boston$lstat), max(Boston$lstat), length.out = 506),
crim = mean(Boston$crim),
zn = mean(Boston$zn),
rm = mean(Boston$rm),
tax = mean(Boston$tax),
ptratio = mean(Boston$ptratio),
black = mean(Boston$black),
age = mean(Boston$age),
dis = mean(Boston$dis)
)
predictions <- predict(mod_10, newdata = test_data_10,  interval = 'confidence')
test_data_10 <- cbind(test_data_10, predictions)
ggplot(test_data_10, aes(x = lstat, y = fit)) +
geom_ribbon(alpha = 0.2, aes(ymin = lwr, ymax = upr)) +
geom_line()
summary(mod_10)
summary(mod_10) %>% xtable() %>% kable %>% kable_styling()
drop1(mod_10)
drop1(mod_10, test = 'F')
summary(mod_10)
jelly <- read.csv('/home/stephen/Институт биоинформатики/Biopractice №3/histo.csv')
jelly <- read.csv('/home/stephen/Институт биоинформатики/Biopractice №3/histo.csv')
View(jelly)
jelly <- read.csv('/home/stephen/Институт биоинформатики/Biopractice №3/histo.csv', sep = ' ')
library(ggplot2)
qplot(jelly)
qplot(jelly$X6755622, jelly)
qplot(jelly$X1, jelly$X6755622, jelly)
qplot(jelly$X1, jelly$X6755622, jelly, geom = 'histogram')
ggplot(jelly, aes(jelly$X1, jelly$X6755622))
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_histogram()
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_bar()
ggplot(jelly, aes(jelly$X6755622)) + geom_bar()
ggplot(jelly, aes(jelly$X6755622)) + geom_histogram()
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_histogram()
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_point()
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_density()
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_line()
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_line() +
labs(x = "k-mer Depth", y = "Count")
jelly <- read.csv('/home/stephen/Институт биоинформатики/Biopractice №3/histo.csv', sep = ' ')
library(ggplot2)
ggplot(jelly, aes(jelly$X1, jelly$X6755622)) + geom_line() +
labs(x = "k-mer Depth", y = "Count")
View(jelly)
dict <- read_tsv('https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/freq_dict_2011.csv')
library(tidyverse)
dict <- read_tsv('https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/freq_dict_2011.csv')
dict_split <- str_split(dict$lemma, "")
str_split(dict$lemma, "") %>% unlist() %>% tolower() %>% table() %>% as.data.frame() %>%
ggplot(aes(., sort(Freq))) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>% unlist() %>% tolower() %>% table() %>% as.data.frame() %>%
filter(. != '-') %>%
ggplot(aes(., sort(Freq))) + geom_histogram(stat = 'identity') + coord_flip()
filter(. != '-' & . != ''') %>%
str_split(dict$lemma, "") %>% unlist() %>% tolower() %>% table() %>% as.data.frame() %>%
filter(. != '-') %>%
ggplot(aes(., sort(Freq))) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame() %>%
filter(. != '-')
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame() %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(., sort(Freq))) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame() %>% sort(Freq) %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(., Freq)) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame() %>% sort() %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(., Freq)) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame()  %>% arrange() %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(., Freq)) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame()  %>% arrange(Freq) %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(., Freq)) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame()  %>% arrange(Freq) %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(., Freq)) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame()  %>% arrange(Freq)
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame()   %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(., fct_reorder(., Freq))) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(., fct_reorder(., Freq)) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(fct_reorder(., Freq), Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(fct_reorder(., Freq), Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(fct_reorder(., Freq), Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(fct_reorder(., Fr4eq), Freq) + geom_histogram(stat = 'identity') + coord_flip()
eq), Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(fct_reorder(., Freq), Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(fct_reorder(., Freq), Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(x = fct_reorder(., Freq), y = Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(x = fct_reorder(., Freq), y = Freq) + geom_histogram(stat = 'identity') + coord_flip()
ggplot(aes(x = fct_reorder(., Freq), y = Freq) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame()   %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(x = fct_reorder(., Freq), y = Freq)) + geom_histogram(stat = 'identity') + coord_flip()
str_split(dict$lemma, "") %>%
unlist() %>% tolower() %>%
table() %>%
as.data.frame()   %>%
filter(. != '-' & . != "'") %>%
ggplot(aes(x = fct_reorder(., Freq), y = Freq)) + geom_histogram(stat = 'identity') + coord_flip()
my_dt <- function(param,n){
pp <- param[1]
pn <- param[2]
pe <- param[3]
if (abs(pn - pp) < 0.00001){
pn = pe-0.00001
}
dens <<- (n==0)*10^-9 + (n>0)*((pe^2*pn*pp^2*((n-1)*(pe*(1-pp))^(n-2)))/((pn-pp)*(pe+pp-pe*pp)^(n+2))) +
((pe*pn*pp^2*(pe*(1-pn))^n)/((pn-pp)^2*(pe-pe*pn)*(pe+pn-pe*pn)^(n+1))) -
((pe*pn*pp^2 * (pe*(1-pp))^n * (pe-2*pn + 3*pp + 2* pe*pn - 3 *pe*pp))/((pn - pp)^2*(pe-pe*pp)*(pe + pp - pe*pp)^(n+2)))
dens[is.na(dens)] <- 10^-9
dens
}
library(ggplot2)
library(grid)
library(gridExtra)
library(ggpubr)
library(LaplacesDemon)
setwd('/home/stephen/Git_Repositories/VDJ_Recombination/Visualisation')
my_dt <- function(param,n){
pp <- param[1]
pn <- param[2]
pe <- param[3]
if (abs(pn - pp) < 0.00001){
pn = pe-0.00001
}
dens <<- (n==0)*10^-9 + (n>0)*((pe^2*pn*pp^2*((n-1)*(pe*(1-pp))^(n-2)))/((pn-pp)*(pe+pp-pe*pp)^(n+2))) +
((pe*pn*pp^2*(pe*(1-pn))^n)/((pn-pp)^2*(pe-pe*pn)*(pe+pn-pe*pn)^(n+1))) -
((pe*pn*pp^2 * (pe*(1-pp))^n * (pe-2*pn + 3*pp + 2* pe*pn - 3 *pe*pp))/((pn - pp)^2*(pe-pe*pp)*(pe + pp - pe*pp)^(n+2)))
dens[is.na(dens)] <- 10^-9
dens
}
objfun <- function(param,n){
tbl <- table(n)
#  print(-sum( log(my_dt(param, as.numeric(names(tbl))))*unname(tbl) ))
-sum( log(my_dt(param, as.numeric(names(tbl))))*unname(tbl) )
}
objfun2 <- function(param,n){
#  print(-sum( log(my_dt(param, as.numeric(names(tbl))))*unname(tbl) ))
-sum( log(my_dt(param, n$Length))*n$Freq )
}
my_optimsearch <- function(in_sample){
rez<-optim(c(0.25,0.1,0.35),objfun,n=in_sample,method="L-BFGS-B",lower = c(0.01, 0.01, 0.01), upper=c(0.99,0.99,0.99))
rez
}
all_files <- list.files(pattern = "\\.csv$")
ds_name <- c("HD07_N_A79HP",
"HD09_N_A93F3",
"HD09_N_AB8KB",
"HD10_N_AB8KB",
"HD13_N_A93F3",
"HD13_N_AB8KB")
plist = list()
counter <- 0
for (f in all_files){
counter <- counter + 1
dataset <- read.csv(f, header = TRUE)
plist[[counter]] <- dataset
}
rez_df = data.frame(sample_size = c(), RSSE = c())
for(sample_size in c(10,100,1000,2000,4000,8000,16000)){
er <- sapply(c(1:160), function(k){
ds_num <- sample(x = c(2:length(plist)), 1, replace = T, prob = rep(1,5)/5)
dataset <- plist[[ds_num]]
subsample <- sample(x = dataset$Length, sample_size, replace = T, prob = dataset$Freq_norm)
rez <- my_optimsearch(subsample)
#    print(rez$par)
emp <- sapply(c(1:50), function(x) sum(subsample==x))
emp <- emp/sample_size
sqrt(sum((my_dt(rez$par,c(1:50)) - emp)^2))
})
new_df <- data.frame(sample_size = rep(sample_size,40), RSSE = er)
rez_df <- rbind(rez_df,new_df)
print(er)
print(mean(er))
}
rez_df$sample_size <- as.factor(rez_df$sample_size)
rez_df$logRSSE = log(rez_df$RSSE)
ggplot(rez_df, aes(x=sample_size, y=logRSSE, fill=sample_size)) +
geom_boxplot() +
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=18),
plot.title = element_text(size=18,face="bold"),
legend.position="none") +
labs(x="Repertoire size", y = "log(RSSE)")
means <- sapply( c(10,100,1000,2000,4000,8000,16000),
function(x) mean(rez_df[rez_df$sample_size==x,]$logRSSE))
sds <- sapply( c(10,100,1000,2000,4000,8000,16000),
function(x) sd(rez_df[rez_df$sample_size==x,]$logRSSE))
appl_df <- data.frame(sample_size = log10(c(10,100,1000,2000,4000,8000,16000)),
mean = means,
ub = means + 1.64*sds)
experim <- read.csv('/home/stephen/Git_Repositories/VDJ_Recombination/Model/experimental_data.csv')
mod <- read.csv('/home/stephen/Git_Repositories/VDJ_Recombination/Model/model_data.csv')
error <- function(vector1,vector2) log( sqrt( sum( (as.numeric(vector2) - as.numeric(vector1))^2 ) ) )
error_notlog <- function(vector1,vector2)  sqrt(
write.csv(df)
write.csv(df, file = 'table.csv')
error <- function(vector1,vector2) log( sqrt( sum( (as.numeric(vector2) - as.numeric(vector1))^2 ) ) )
error_notlog <- function(vector1,vector2)  sqrt( sum( (as.numeric(vector2) - as.numeric(vector1))^2 ) )
#############
ID = c('SRR5888724','SRR5888725','SRR5888726',
'SRR5888727','SRR5888728','SRR5888729',
'SRR5888730','SRR5888731','SRR5888732',
'SRR5888733','SRR5888734','SRR5888735',
'SRR5888736')
Week <- c(0,14,15,19,31,43,55,80,102,128,153,177,200)
Error <- mapply(error_notlog, experim, mod)
Significant = c('-','-','-',
'-','-','+',
'-','-','+',
'+','-','-',
'+')
df <- data.frame(ID, Week, Error, Significant)
bla <- capture.output(stargazer(df, out='table.html'))
write.csv(df, file)
write.csv(df, file = 'table.csv'
write.csv(df, file = 'table.csv')
write.csv(df, file = 'table.csv')
write.csv(df, file = 'table.csv')
write.csv(df, file = 'table.csv')
write.csv(df, file = 'table.csv')
write.csv(df, file = 'table.csv')
View(df)
